import { AfterEvent, afterEventBy } from '../after-event';
import { EventSender, OnEvent__symbol } from '../base';

/**
 * Builds an {@link AfterEvent} keeper of events sent by the given `sender`.
 *
 * The event generated by `fallback` will be sent to the registered first receiver, unless `register` function sends
 * one.
 *
 * @category Core
 * @typeParam TEvent - An event type. This is a list of event receiver parameter types.
 * @param sender - An event sender.
 * @param fallback - A function creating fallback event. When omitted, the initial event is expected to be sent by
 * `register` function. A receiver registration would lead to an error otherwise.
 *
 * @returns An {@link AfterEvent} keeper of events either originated from the given `sender`, or `initial` one.
 */
export function afterSent<TEvent extends any[]>(
  sender: EventSender<TEvent>,
  fallback?: (this: void) => TEvent,
): AfterEvent<TEvent> {
  return afterEventBy(receiver => sender[OnEvent__symbol]()(receiver), fallback);
}
